name: 'Self Hosted Runner'
on:
  push:
    branches:
    - main
  pull_request:

jobs:
  run_ghr_job:
    name: 'Github Hosted Runner Job'
    runs-on: ubuntu-latest
    environment: production
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
      ARM_CLIENT_SECRET:  ${{ secrets.CLIENTSECRET }}
      GH_ORG: shrisaranraj
      GH_REPO: shrisaranraj

defaults:
    run:
      shell: bash

       steps:
              - name: 'Az CLI login'
                uses: Azure/login@v1
                with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
                  allow-no-subscriptions: true 
                if: |
                  !cancelled()
              - name: Setup Terraform
                id: setupTF
                uses: hashicorp/setup-terraform@v1

              - name: 'Checkout Repo'
                uses: actions/checkout@v2
                with:
                  ref: 'main'
                  fetch-depth:  0
                if: |
                  !cancelled()

              - id:   getregtoken
                name: 'Get SHR registration token'
                if: |
                  !cancelled()
                env:
                  GHPAT: ${{ secrets.GH_PAT }}
                run: |
                  tokenfail="false"
                  RUNNER_TOKEN=$(curl -s -X POST "https://api.github.com/repos/$GH_ORG/$GH_REPO/actions/runners/registration-token" -H "accept: application/vnd.github.v3+json" -H "authorization: token $GHPAT" | jq -r '.token')
                  if [ "null" == "$RUNNER_TOKEN" -o -z "$RUNNER_TOKEN" ]; then
                    tokenfail="true"
                    echo "Failed to get an authentication token."
                    echo "::set-output name=tokenfail::$tokenfail"
                    exit 1
                  fi

                  echo "Got an authentication token for the self-hosted runner."
                  echo "::set-output name=tokenfail::$tokenfail"
                  echo "::set-output name=runnertoken::$RUNNER_TOKEN"

              - id:   ghr_job
                name: 'Github Runner VM Creation'
                if: |
                  !cancelled() &&
                  ( "${{ steps.getregtoken.outputs.tokenfail }}" == "false" )
                env:
                  TF_VAR_gh_org:  ${{ env.GH_ORG }}
                  TF_VAR_gh_repo:  ${{ env.GH_REPO }}
                  TF_VAR_sub_id:  ${{ env.SUBSCRIPTIONID }}
                  TF_VAR_gh_token:   ${{ steps.getregtoken.outputs.runnertoken }}

                run: |
                  PTH='./self-hosted'
                  cd "$PTH"

                  terraform init -input=false
                  terraform validate
                  terraform plan 

                  terraform apply -auto-approve 

              - name: Azure CLI script
                uses: azure/CLI@v1
                with:
                  azcliversion: 2.0.72
                  inlineScript: |
                    az logout
                    az cache purge
                    az account clear

status_check:
    name:     'Verify Self-Hosted Runner Is Registered'
    needs:    [run_ghr_job]
    if: |
      !cancelled()
    runs-on:  ubuntu-latest
    environment:        Prod
    outputs: 
      shrregistered:      ${{ steps.shr_exist.outputs.shrregistered }}
    env:
      GH_ORG: shrisaranraj
      GH_REPO: shrisaranraj
    steps:
      - name: shr_exist
        run: |
          echo "Waiting up to 15 minutes for the self-hosted runner to register..."
          runnerpre="self-hosted runner runner-vm }}"
          runnerstatus=$(curl -s -X GET https://api.github.com/repos/$GH_ORG/$GH_REPO/actions/runners?per_page=100  -H "accept: application/vnd.github.everest-preview+json" -H "authorization: token ${{ secrets.GH_PAT }}" | jq -M -j ".runners | .[]? | select(.name == \"runner-vm\") | .status")
          if [ -z "${runnerstatus}" ]||[ "${runnerstatus}" != "online" ]; then
          loopa="stay"
          cnta=0
          shrregistered="false"
          echo "$runnerpre not found or not online yet. Status:  ${runnerstatus}"
          echo "$cnta Retrying soon..."
          while [ "$loopa" == "stay" ]
            do
              cnta=$(($cnta+1))
              sleep 30s
              runnerstatus=$(curl -s -X GET https://api.github.com/repos/$GH_ORG/$GH_REPO/actions/runners?per_page=100  -H "accept: application/vnd.github.everest-preview+json" -H "authorization: token ${{ secrets.GH_PAT }}" | jq -M -j ".runners | .[]? | select(.name == \"runner-vm\") | .status")
              if [ -z "${runnerstatus}" ]; then
                echo "$runnerpre has not registered yet."
                echo "$cnta  Retrying soon..."
              elif [ "${runnerstatus}" != "online" ]; then
                echo "$runnerpre status: ${runnerstatus}"
                echo "$cnta  Retrying soon..."
              else
                echo "$runnerpre found.  Status:  ${runnerstatus}"
                shrregistered="true"
                echo "::set-output name=shrregistered::$shrregistered"
                loopa="go"
              fi
              if [ $cnta == 20 ]; then
                echo "Giving up on $runnerpre -- timed out."
                echo "::set-output name=shrregistered::$shrregistered"
                exit 1
              fi
            done
          else
            echo "$runnerpre found.  Status:  ${runnerstatus}"
            shrregistered="true"
            echo "::set-output name=shrregistered::$shrregistered"
          fi

run_shr_job:
    name:     Self-Hosted Runner Job
    needs:    [ run_ghr_job,status_check ]
    if: |
      !cancelled() &&
      (${{ needs.statuscheck.outputs.shrregistered }} == "true")
    runs-on:  [ "self-hosted"]
    environment:        Prod
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
      ARM_CLIENT_SECRET:  ${{ secrets.CLIENTSECRET }}

      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
        with:
          ref: 'main'
          fetch-depth:  0
        if: |
          !cancelled()

      - id:   RunTFScripts
        name: 'Deploy TF Scripts'
        if: |
          !cancelled()
        run: |
          PTH='./resources'
          cd "$PTH"

          terraform init -input=false
          terraform validate
          terraform apply -auto-approve 

remove_shr:
    name: 'Remove Self Hosted Runner Job'
    runs-on: ubuntu-latest
    environment: production
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
      ARM_CLIENT_SECRET:  ${{ secrets.CLIENTSECRET }}
      GH_ORG: shrisaranraj
      GH_REPO: shrisaranraj

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Az CLI login'
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true
        if: |
          !cancelled()
      - name: Setup Terraform
        id: setupTF
        uses: hashicorp/setup-terraform@v1
      
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
        with:
          ref: 'main'
          fetch-depth:  0
        if: |
          !cancelled()
      - id:   ghr_job
        name: 'Github Runner VM Creation'
        if: |
          !cancelled() &&
          ( "${{ steps.getregtoken.outputs.tokenfail }}" == "false" )
        env:
          TF_VAR_gh_org:  ${{ env.GH_ORG }}
          TF_VAR_gh_repo:  ${{ env.GH_REPO }}
          TF_VAR_sub_id:  ${{ env.ARM_SUBSCRIPTION_ID }}

        run: |
          PTH='./self-hosted'
          cd "$PTH"

          terraform init -input=false
          terraform apply -auto-approve -destroy
